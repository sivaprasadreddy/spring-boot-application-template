<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0  https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>3.1.3</version>
    <relativePath />
    <!-- lookup parent from repository -->
  </parent>
  <groupId>com.sivalabs</groupId>
  <artifactId>spring-boot-application-template</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>spring-boot-application-template</name>
  <description>Spring Boot Application Template</description>
  <properties>
    <java.version>17</java.version>
    <springdoc-openapi.version>2.2.0</springdoc-openapi.version>

    <spotless.version>2.39.0</spotless.version>
    <dependency-check-maven.version>8.3.1</dependency-check-maven.version>
    <properties-maven-plugin.version>1.1.0</properties-maven-plugin.version>
    <sonar-maven-plugin.version>3.9.1.2184</sonar-maven-plugin.version>
    <jacoco-maven-plugin.version>0.8.10</jacoco-maven-plugin.version>
    <jacoco.minimum.coverage>80%</jacoco.minimum.coverage>
    <project.testresult.directory>${project.build.directory}/test-results</project.testresult.directory>
    <jacoco.utReportFolder>${project.build.directory}/jacoco/test</jacoco.utReportFolder>
    <jacoco.utReportFile>${jacoco.utReportFolder}/test.exec</jacoco.utReportFile>
    <junit.utReportFolder>${project.testresult.directory}/test</junit.utReportFolder>

    <db.username>postgres</db.username>
    <db.password>postgres</db.password>
  </properties>
  <dependencies>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-validation</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-jooq</artifactId>
    </dependency>
    <dependency>
      <groupId>org.flywaydb</groupId>
      <artifactId>flyway-core</artifactId>
    </dependency>
    <dependency>
      <groupId>org.postgresql</groupId>
      <artifactId>postgresql</artifactId>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>
    <dependency>
      <groupId>io.micrometer</groupId>
      <artifactId>micrometer-registry-prometheus</artifactId>
    </dependency>
    <dependency>
      <groupId>io.micrometer</groupId>
      <artifactId>micrometer-tracing-bridge-otel</artifactId>
    </dependency>
    <dependency>
      <groupId>io.opentelemetry</groupId>
      <artifactId>opentelemetry-exporter-zipkin</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springdoc</groupId>
      <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
      <version>${springdoc-openapi.version}</version>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-devtools</artifactId>
      <scope>runtime</scope>
      <optional>true</optional>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-configuration-processor</artifactId>
      <optional>true</optional>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-testcontainers</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>junit-jupiter</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>postgresql</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <configuration>
          <excludes>
            <exclude>
              <groupId>org.projectlombok</groupId>
              <artifactId>lombok</artifactId>
            </exclude>
          </excludes>
        </configuration>
      </plugin>
      <plugin>
        <groupId>io.github.git-commit-id</groupId>
        <artifactId>git-commit-id-maven-plugin</artifactId>
        <configuration>
          <failOnNoGitDirectory>false</failOnNoGitDirectory>
          <failOnUnableToExtractRepoInfo>false</failOnUnableToExtractRepoInfo>
          <generateGitPropertiesFile>true</generateGitPropertiesFile>
          <includeOnlyProperties>
            <includeOnlyProperty>^git.branch$</includeOnlyProperty>
            <includeOnlyProperty>^git.commit.id.abbrev$</includeOnlyProperty>
            <includeOnlyProperty>^git.commit.user.name$</includeOnlyProperty>
            <includeOnlyProperty>^git.commit.message.full$</includeOnlyProperty>
          </includeOnlyProperties>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>revision</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.gmaven</groupId>
        <artifactId>groovy-maven-plugin</artifactId>
        <version>2.1.1</version>

        <dependencies>
          <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>postgresql</artifactId>
            <version>${testcontainers.version}</version>
          </dependency>
        </dependencies>
        <executions>
          <execution>
            <id>testcontainer-start</id>
            <goals>
              <goal>execute</goal>
            </goals>
            <phase>generate-sources</phase>
            <configuration>
              <source>db = new org.testcontainers.containers.PostgreSQLContainer("postgres:15.2-alpine")
                        .withUsername("${db.username}")
                        .withDatabaseName("postgres")
                        .withPassword("${db.password}")
                db.start()
                project.properties.setProperty('db.url', db.getJdbcUrl())
                project.properties.setProperty('testcontainer.containerid', db.getContainerId())
                project.properties.setProperty('testcontainer.imageName', db.getDockerImageName())</source>
            </configuration>
          </execution>
          <execution>
            <id>testcontainer-stop</id>
            <goals>
              <goal>execute</goal>
            </goals>
            <phase>test</phase>
            <configuration>
              <source>containerId = "${testcontainer.containerid}"
                imageName = "${testcontainer.imageName}"
                println("Stopping testcontainer $containerId - $imageName")
                org.testcontainers.utility.ResourceReaper
                        .instance()
                        .stopAndRemoveContainer(containerId, imageName);</source>
            </configuration>
          </execution>

        </executions>
      </plugin>
      <plugin>
        <groupId>org.flywaydb</groupId>
        <artifactId>flyway-maven-plugin</artifactId>
        <version>7.14.0</version>
        <executions>
          <execution>
            <goals>
              <goal>migrate</goal>
            </goals>
            <phase>generate-sources</phase>
            <configuration>
              <url>${db.url}</url>
              <user>${db.username}</user>
              <password>${db.password}</password>
              <locations>
                <location>filesystem:src/main/resources/db/migration</location>
              </locations>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.jooq</groupId>
        <artifactId>jooq-codegen-maven</artifactId>
        <version>${jooq.version}</version>
        <executions>
          <execution>
            <id>generate-jooq-sources</id>
            <goals>
              <goal>generate</goal>
            </goals>
            <phase>generate-sources</phase>
            <configuration>
              <jdbc>
                <url>${db.url}</url>
                <user>${db.username}</user>
                <password>${db.password}</password>
              </jdbc>
              <generator>
                <generate>
                  <pojos>true</pojos>
                  <daos>true</daos>
                  <springAnnotations>true</springAnnotations>
                  <pojosEqualsAndHashCode>true</pojosEqualsAndHashCode>
                  <javaTimeTypes>true</javaTimeTypes>
                  <validationAnnotations>false</validationAnnotations>
                </generate>
                <database>
                  <inputSchema>public</inputSchema>
                  <includes>.*</includes>
                  <excludes>flyway_schema_history</excludes>
                </database>
                <!-- Rename the generated POJOs and DAOs classes -->
                <!--<strategy>
                  <matchers>
                    <tables>
                      <table>
                        <pojoClass>
                          <expression>JOOQ_$0</expression>
                          <transform>PASCAL</transform>
                        </pojoClass>
                        <daoClass>
                          <expression>$0_Repository</expression>
                          <transform>PASCAL</transform>
                        </daoClass>
                      </table>
                    </tables>
                  </matchers>
                </strategy>-->
                <target>
                  <clean>true</clean>
                  <packageName>com.sivalabs.bookmarks.jooq</packageName>
                  <directory>src/main/jooq</directory>
                </target>
              </generator>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <executions>
          <execution>
            <goals>
              <goal>add-source</goal>
            </goals>
            <phase>generate-sources</phase>
            <configuration>
              <sources>
                <source>src/main/jooq</source>
              </sources>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <runOrder>alphabetical</runOrder>
          <reportsDirectory>${junit.utReportFolder}</reportsDirectory>
          <excludes>
            <exclude>**/*IT*</exclude>
            <exclude>**/*IntTest*</exclude>
            <exclude>**/*IntegrationTest*</exclude>
          </excludes>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <configuration>
          <classesDirectory>${project.build.outputDirectory}</classesDirectory>
          <runOrder>alphabetical</runOrder>
          <reportsDirectory>${junit.itReportFolder}</reportsDirectory>
          <includes>
            <include>**/*IT*</include>
            <include>**/*IntTest*</include>
            <include>**/*IntegrationTest*</include>
          </includes>
        </configuration>
        <executions>
          <execution>
            <id>integration-test</id>
            <goals>
              <goal>integration-test</goal>
            </goals>
          </execution>
          <execution>
            <id>verify</id>
            <goals>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>properties-maven-plugin</artifactId>
        <version>${properties-maven-plugin.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>read-project-properties</goal>
            </goals>
            <phase>initialize</phase>
            <configuration>
              <files>
                <file>sonar-project.properties</file>
              </files>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>com.diffplug.spotless</groupId>
        <artifactId>spotless-maven-plugin</artifactId>
        <version>${spotless.version}</version>
        <configuration>
          <java>
            <palantirJavaFormat>
              <version>2.30.0</version>
            </palantirJavaFormat>
            <importOrder />
            <removeUnusedImports />
            <formatAnnotations />
          </java>
          <pom>
            <includes>
              <include>pom.xml</include>
            </includes>
            <sortPom>
              <expandEmptyElements>false</expandEmptyElements>
              <spaceBeforeCloseEmptyElement>true</spaceBeforeCloseEmptyElement>
            </sortPom>
          </pom>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>${jacoco-maven-plugin.version}</version>
        <executions>
          <execution>
            <id>pre-unit-tests</id>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
            <configuration>
              <!-- Sets the path to the file which contains the execution data. -->
              <destFile>${jacoco.utReportFile}</destFile>
            </configuration>
          </execution>
          <!-- Ensures that the code coverage report for unit tests is created after unit tests have been run -->
          <execution>
            <id>post-unit-test</id>
            <goals>
              <goal>report</goal>
            </goals>
            <phase>test</phase>
            <configuration>
              <dataFile>${jacoco.utReportFile}</dataFile>
              <outputDirectory>${jacoco.utReportFolder}</outputDirectory>
            </configuration>
          </execution>
          <execution>
            <id>default-check</id>
            <goals>
              <goal>check</goal>
            </goals>
            <configuration>
              <dataFile>${jacoco.utReportFile}</dataFile>
              <rules>
                <rule>
                  <element>BUNDLE</element>
                  <limits>
                    <limit>
                      <counter>LINE</counter>
                      <value>COVEREDRATIO</value>
                      <minimum>${jacoco.minimum.coverage}</minimum>
                    </limit>
                  </limits>
                </rule>
              </rules>
              <excludes>
                <exclude>com/sivalabs/bookmarks/jooq/**</exclude>
              </excludes>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.owasp</groupId>
        <artifactId>dependency-check-maven</artifactId>
        <version>${dependency-check-maven.version}</version>
        <configuration>
          <failOnError>false</failOnError>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.sonarsource.scanner.maven</groupId>
        <artifactId>sonar-maven-plugin</artifactId>
        <version>${sonar-maven-plugin.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>sonar</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>
